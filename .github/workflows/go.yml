name: Build and Release

on:
  push:
    branches:
      - v1
    tags:
      - Release
jobs:
  build:
    name: Build Release Asset
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@master

      - name: Set up Go 1.13
        uses: actions/setup-go@v1
        with:
          go-version: 1.13
        id: go

      - name: Check out code into the Go module directory
        uses: actions/checkout@v1

      - name: cache modules
        uses: actions/cache@v1
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Get dependencies
        run: |
          go get -v -t -d ./...
          if [ -f Gopkg.toml ]; then
              curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
              dep ensure
          fi

      - name: Build
        env:
          GOOS: windows
          GOARCH: amd64
        run: go build -v -o prtg_vmware.exe .

      - name: zip release # This would actually build your project, using zip for an example artifact
        run: |
          zip --junk-paths prtg_vmware.zip README.md prtg_vmware.exe

      - name: Upload binary
        uses: actions/upload-artifact@v1
        with:
          name: prtg_vmware.zip
          path: ./prtg_vmware.zip

  release:
    name: Upload Release Asset
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: v1.0
          body: |
            Changes in this Release
            - testing wworkflow
            - Second Change
            draft: false
            prerelease: true

      - name: Download artifact
        uses: actions/download-artifact@v1
        with:
          name: prtg_vmware.zip
          path: prtg_vmware

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./prtg_vmware/prtg_vmware.zip
          asset_name: prtg_vmware.zip
          asset_content_type: application/zip

      - name: Slack notification
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        uses: Ilshidur/action-slack@master
        with:
          args: 'A new release has been created'